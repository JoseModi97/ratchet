/* Custom CSS rules from YAML */

/* Overrides */
.chat-messages {
  overflow-y: auto;
  flex-grow: 1;
  padding: 1rem;
  /* This selector might need to target a more specific element
     if #chat-output is intended to be the scrollable message area itself.
     The YAML structure implies .chat-messages is a container for #chat-output.
     Assuming #chat-output is the direct child that scrolls.
     The original HTML has #chat-output as the scrollable area.
     Let's ensure this works with the existing #chat-output.
     If #chat-output is the main scrolling area, these rules might apply to it or its parent.
     Given the HTML structure, #chat-output is the primary scrollable area.
     The YAML's .chat-messages might be a wrapper, or #chat-output itself.
     For now, applying to #chat-output as it's more specific.
  */
}

#chat-output {
  min-height: 0; /* Already somewhat handled by flex-grow */
  flex-grow: 1; /* This is key for it to fill space */
  /* overflow-y: auto; -- This is already in the original CSS and YAML's .chat-messages */
  /* padding: 1rem; -- This is in YAML's .chat-messages, applying here if #chat-output is the direct target */
}

#message-input { /* This is an ID in HTML, ensure it's not a class if YAML implies class */
  /* border-top: 1px solid #ccc; -- This is from YAML, original has its own border */
  /* padding: 10px; -- This is from YAML, original has its own padding */
  /* These are more specific rules for the input field itself, not its container.
     The YAML also has component styles for 'chat_input' which might be more appropriate.
     For now, applying YAML's custom_css overrides.
   */
}

/* Style for the container of message input and send button if needed */
/* For example, if #input-area is the target for these overall rules: */
#input-area { /* This is the existing ID for the input area container */
    border-top: 1px solid #ccc;
    padding: 10px;
}


.notification-popup {
  position: absolute;
  top: 10px;
  right: 20px;
  z-index: 999;
  background: white;
  border: 1px solid #ddd;
  box-shadow: 0 2px 8px rgba(0,0,0,0.2);
  display: none; /* Initial state */
  padding: 15px; /* Adding some padding for content */
  min-width: 250px; /* Minimum width */
}

/* Responsiveness */
@media (max-width: 576px) { /* sm breakpoint */
  /* YAML: #room-list: "display: none" */
  /* In our new structure, #room-list-container is the column for rooms. */
  #room-list-container {
    display: none !important; /* Important to override Bootstrap's column display */
  }

  /* YAML: #chat-interface: "width: 100%" */
  /* Bootstrap's col-md-9 will become col-12 effectively if the other col is hidden.
     Or, we can be explicit. Using Bootstrap's responsive grid, this should be col-sm-12 or just rely on the other being hidden.
     If #room-list-container is display:none, #chat-interface (col-md-9) should expand.
     To be certain for Bootstrap 4, we can change its column class or ensure it takes full width.
     Let's ensure it becomes full width.
  */
  #chat-interface {
    flex: 0 0 100%; /* Override Bootstrap column width */
    max-width: 100%;
  }

  /* Show back_to_rooms_button if it exists and is meant for this */
  /* .back_to_rooms_button { display: inline-block !important; } */
}

@media (max-width: 768px) { /* md breakpoint */
  body {
    font-size: 14px; /* YAML specified */
  }
  .list-group-item { /* YAML specified */
    padding: 0.5rem 1rem;
  }
  /* Hide the original #back-to-dashboard button on larger screens if a new one is used for mobile */
  /* Or adapt it. The YAML implies a new button for this specific purpose. */
  /* If #back-to-dashboard is the one to be used, it should be visible here or by default */
}

/* Component Styles from YAML (if not already covered by Bootstrap or specific overrides) */
/* chat_input: classes: ["form-control", "rounded-0", "border-top"] placeholder: "Type your message here..." */
/* #message-input is already form-control via Bootstrap. rounded-0 and border-top can be added. */
#message-input.form-control { /* Targeting the existing element with its Bootstrap class */
    border-radius: 0; /* rounded-0 */
    /* border-top: 1px solid #dee2e6; */ /* border-top, Bootstrap's default border color for form-control */
    /* The #input-area already has a border-top from custom_css.overrides */
}

/* send_button: classes: ["btn", "btn-primary", "rounded-0"] label: "Send" */
/* #send-button is existing. Add rounded-0. btn and btn-primary should be on the HTML element. */
#send-button.btn { /* Ensure it has btn class */
    border-radius: 0; /* rounded-0 */
}

/* back_to_rooms_button: classes: ["btn", "btn-link", "text-muted", "p-0"] label: "← Back to Rooms" */
/* This button will be added to HTML in step 4. These are its styles. */
.back_to_rooms_button {
  /* display: none; /* Initially hidden, shown on small screens by @media query above */
  /* Styles will be applied when the element is created. */
  /* For now, this is a placeholder for its styles. */
}

/* Additional styling to make the new layout work well with existing content */
html, body {
    height: 100%;
    overflow: hidden; /* Prevent double scrollbars if possible */
}

#main-app-container.container-fluid, #main-app-container > .row {
    height: calc(100vh - 58px); /* Adjust 58px if header bar height is different */
    /* This assumes header-bar is visible. If not, it should be 100vh. */
    /* The header-bar display is controlled by JS. */
}

/* Ensure columns themselves don't overflow if their content is scrollable via overflow-auto */
#room-list-container, #chat-interface {
    padding: 0; /* Remove default Bootstrap column padding if it interferes with vh-100 and overflow */
}

#room-dashboard, #chat-wrapper {
    height: 100%; /* Ensure these inner containers fill their column */
    display: flex;
    flex-direction: column;
}

#room-dashboard #room-list { /* The UL for rooms */
    flex-grow: 1; /* Allow it to take available space */
    overflow-y: auto; /* Ensure it's scrollable if content exceeds height */
}

#chat-wrapper #chat-content-wrapper {
    flex-grow: 1;
    overflow-y: hidden; /* Prevent this wrapper from scrolling, #chat-output will scroll */
}
#chat-wrapper #chat-container {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    overflow-y: hidden; /* chat-output handles its own scroll */
}

/* Ensure #chat-output uses the padding from .chat-messages if that's the intent */
#chat-output {
    padding: 1rem; /* from YAML's .chat-messages */
}

/* Fix for vh-100 issue with Bootstrap fixed header if any */
body {
    padding-top: 0; /* Reset if a fixed top navbar from Bootstrap was assumed */
}
.header-bar {
    flex-shrink: 0; /* Prevent header from shrinking */
}
#auth-container {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
}

/* When main-app-container is visible, body should probably not scroll */
body.app-active {
    overflow-y: hidden;
}

/* Refinement for room list and chat interface heights with header */
/* This requires JS to add/remove a class like 'header-visible' to body or main-app-container */
.header-visible #main-app-container.container-fluid,
.header-visible #main-app-container > .row {
    /* Assuming header is around 58px. Measure or use JS to set this. */
    height: calc(100vh - 58px);
}

#main-app-container.container-fluid,
#main-app-container > .row {
    /* Default when header is not visible (e.g. auth screen) */
    height: 100vh;
}

/* If #main-header-bar is outside #main-app-container and always visible with it */
body.app-view #main-app-container.container-fluid,
body.app-view #main-app-container > .row {
     height: calc(100vh - 58px); /* Adjust 58px to actual height of #main-header-bar */
}
body.auth-view #main-app-container.container-fluid,
body.auth-view #main-app-container > .row {
     height: 100vh; /* Auth view might not have the header */
}

/* Final thoughts on YAML rules vs existing:
   - YAML's .chat-messages rules are applied to #chat-output for padding and flex behavior. overflow-y is already on #chat-output.
   - YAML's #chat-output rules (min-height:0, flex-grow:1) reinforce the flex behavior.
   - YAML's #message-input rules (border-top, padding) are applied to #input-area (the container).
   - YAML's .notification-popup is styled as specified.
   - Responsive rules are applied as specified, targeting the new column IDs.
*/
